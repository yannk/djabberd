<?page
wintitle=>XMPP server where everything is a plugin.
body<=

<h2>What</h2>

<p>DJabberd is a <a href="#perf">high-performance</a>, <a href="#scalable">scalable</a>, <a href="#ext">extensible</a> Jabber/XMPP server <i>framework</i>.  While it comes with an example server, it's really a set of classes for you to build your own Jabber server without understanding Jabber.  Instead of working with XML and protocol-specific details, you subclass parts and work with sane objects and data structures and let DJabberd do <a href="#compliant">all the ugly work</a>.</p>

<h2>Status</h2>

<p>Current status:  2006-04-11, still under heavy development, but now ~90% done, though very much still in development mode.  Cleaning stuff up now, adding polish.  There will be no official release until it's been used in production and hasn't blown up on us.  For now, the brave can get it from <a href="http://code.sixapart.com/svn/djabberd/">subversion</a>.</p>

<a name='ext'></a><h2>Extensible</h2>

<p>Consider DJabberd the mod_perl/qpsmtpd/Perlbal/Plagger of the XMPP world.  Everything is a plugin.  The framework lets you override the behavior of:</p>

<ul class='spaced'>
<li>Authentication</li>
<li>Authorization</li>
<li>Roster Storage</li>
<li>Automatic roster population</li>
<li>Presence lookup</li>
<li>Message delivery</li>
<li>Internode communication</li>
<li>...</li>
<li><i>everything else</i></li>
</ul>

<p>Or, if you're lazy, choose mix and match behaviors from other CPAN modules:  mix LDAP auth with SQLite storage with LDAP roster-population, with Spread inter-node communication...</p>

<p>You can even have multiple plugins per hook, in any order.  Also, rather than implementing the hooks directly, the framework comes with simple objects you can subclass which further eases the use of the async plugin system.</p>

<a name='perf'></a><h2>High Performance</h2>

<p>While implemented in Perl (which might dissuade you), DJabberd is written using the same event-based architecture that powers <a href="http://danga.com/perlbal/">Perlbal</a>, which pushes out billions of HTTP requests per month for LiveJournal.com.  In detail, it:</p>

<ul class='spaced'>
<li>Is async/event-based.</li>
<li>Uses epoll on Linux 2.6, enabling tens to hundreds of thousands of connections in a single process, limited only by memory.  (but new connections use signifigantly less memory than a threaded server)</li>
<li>All the aforementioned plugins can operate asynchronously.  (If you're lazy, you can block in them, for low-traffic servers...)</li>
<li>Uses expat (implemented in C) for the XML processing.</li>
</ul>

<a name='scalable'></a><h2>Scalable</h2>

<p>Internode-communication lets you just scale out, providing both load balancing and high availability in your Jabber farm.  Because good Jabber clients will quietly reconnect on TCP connection failure, you can even do rolling code upgrades without users noticing.</p>

<p>As an admin, you're free to choose which internode communication method to use or you can write your own, specific to your application (assuming you're integrating this into an application).</p>

<a name='compliant'></a><h2>Compliant</h2>

<p>The DJabberd core aims to be fully XMPP 1.0 compliant, as well as supporting common pre-XMPP standards.  To name the obvious ones, DJabberd supports:</p>

<ul class='spaced'>
<li>s2s (Server to Server), but may be disabled</li>
<li>StartTLS support.  (pre-XMPP SSL on alternate port not yet done, but easy)</li>
<li>...</li>
</ul>

<=body
page?>
